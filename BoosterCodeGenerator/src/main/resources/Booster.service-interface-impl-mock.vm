package ${serviceImplementationMockPackage};

import java.io.Serializable;
import java.util.List;

import org.dynadto.BuilderFactory;
import org.springframework.transaction.annotation.Transactional;

import ${entityPackage}.${entityClassName};
import ${daoPackage}.${daoClassName};
import ${intefaceServicePackage}.${interfaceServiceClassName};
import ${dtoPackage}.${dtoClassName};

import com.hexacta.mapper.DTOtoEntityMapper;

public class ${serviceImplementationClassName} implements ${interfaceServiceClassName} {
	
	private ${daoClassName} ${daoVarName};
	private BuilderFactory factory;
	private DTOtoEntityMapper beanMapper;
				
	public void set${daoClassName}(${daoClassName} ${daoVarName}) {
		this.${daoVarName} = ${daoVarName};
	}
	
	public void setFactory(BuilderFactory factory) {
		this.factory = factory;
	}
	
	public void setBeanMapper(final DTOtoEntityMapper beanMapper) {
        	this.beanMapper = beanMapper;
    	}	
	
	@Transactional(readOnly = false)
	public void add(${dtoClassName} ${dtoVarName}) throws RuntimeException{
		${entityClassName} ${entityVarName} = new ${entityClassName}(); 
		
		// map DTO to entity
        	beanMapper.map(${dtoVarName}, ${entityVarName});
		
		${daoVarName}.save(${entityVarName});	
		throw new RuntimeException();
	}

	@Transactional(readOnly = false)
	public void delete(Serializable id){
		
		${entityClassName} ${entityVarName}= ${daoVarName}.findById(id);
		${daoVarName}.delete(${entityVarName});
		
	}

	@Transactional(readOnly = false)
	public void update(${dtoClassName} ${dtoVarName}){

		${entityClassName} ${entityVarName}= ${daoVarName}.findById(${dtoVarName}.getId());
		
		// synchronization between DTO and entity
		beanMapper.map(${dtoVarName}, ${entityVarName});
				
		${daoVarName}.update(${entityVarName});
		throw new RuntimeException();
		
	}
	
	public void addNotTransactional(${dtoClassName} ${dtoVarName}) throws Exception{
		${entityClassName} ${entityVarName} = new ${entityClassName}(); 

		// map DTO to entity
        	beanMapper.map(${dtoVarName}, ${entityVarName});		

		${daoVarName}.save(${entityVarName});	
		throw new RuntimeException();
	}
	
	@Transactional(readOnly = true)
	public ${dtoClassName} retrieve(Serializable id){
		return (factory.getBuilder(${dtoClassName}.class).build(${daoVarName}.findById(id)));	
	}

	@Transactional(readOnly = true)
	public List<${dtoClassName}> retrieveAll() {
		return null;
	}

	
}