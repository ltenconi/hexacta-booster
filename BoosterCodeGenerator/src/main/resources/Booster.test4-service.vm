package ${serviceTestPackage};

import static org.junit.Assert.*;

import java.util.List;

import org.dynadto.Builder;
import org.junit.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.annotation.DirtiesContext;

import ${interfaceServicePackage}.${interfaceServiceClassName};
import ${interfaceDtoPackage}.${interfaceDtoClassName};

public class ${testClassName} extends AbstractServiceTest4 {
	
	@Autowired
	private ${interfaceServiceClassName} ${serviceVarName};
	
	public void set${interfaceServiceClassName}(${interfaceServiceClassName} ${serviceVarName}) {
		this.${serviceVarName} = ${serviceVarName};
	}	
	
	@Test
        @DirtiesContext
	public void testAdd() {
	 
	  	 Builder<${interfaceDtoClassName}> builder = factory.getBuilder(${interfaceDtoClassName}.class);
	     ${interfaceDtoClassName} ${interfaceDtoVarName} = builder.build();
	  	  
	     ${serviceVarName}.add(${interfaceDtoVarName});
	    	      
	     ${interfaceDtoClassName} recoveredDTO = ${serviceVarName}.retrieve(${interfaceDtoVarName}.getId());
	     assertEquals(${interfaceDtoVarName}.getId() , recoveredDTO.getId());
	        
	 }
	 
	 @Test
     @DirtiesContext
     public void testDelete() {
	   
		   Builder<${interfaceDtoClassName}> builder = factory.getBuilder(${interfaceDtoClassName}.class);
		   ${interfaceDtoClassName} ${interfaceDtoVarName} = builder.build();

		   ${serviceVarName}.add(${interfaceDtoVarName});
		   ${serviceVarName}.delete(${interfaceDtoVarName}.getId());

		   ${interfaceDtoClassName} recoveredDTO = ${serviceVarName}.retrieve(${interfaceDtoVarName}.getId());
		   assertNull(recoveredDTO);
			        
	   }
	   
	  
	   @Test
       @DirtiesContext
	   public void testUpdate() {
	   
	   	 #if ($modificable == false)
	   	 
      		assert(true);
  		 
  		 #else   
          try{
         		Builder<${interfaceDtoClassName}> builder = factory.getBuilder(${interfaceDtoClassName}.class);
	      		${interfaceDtoClassName} ${interfaceDtoVarName} = builder.build();
			   
	  	  	${interfaceDtoVarName}.${setterMethod}(${fieldValue});
          	    	 	      
	   	  	${serviceVarName}.add(${interfaceDtoVarName});
	   	 	 
	   	   	${interfaceDtoClassName} recovered${interfaceDtoVarName} = ${serviceVarName}.retrieve(${interfaceDtoVarName}.getId());

			assertEquals(${fieldValue}, recovered${interfaceDtoVarName}.${getterMethod}());

			${interfaceDtoVarName}.${setterMethod}(${anotherFieldValue});

			${serviceVarName}.update(${interfaceDtoVarName});

			${interfaceDtoClassName} anotherRecovered${interfaceDtoVarName} = ${serviceVarName}.retrieve(${interfaceDtoVarName}.getId());		
			
			assertEquals(${anotherFieldValue}, anotherRecovered${interfaceDtoVarName}.${getterMethod}());
	      	
	      	} catch (Exception e) {
            fail(e.getMessage());
        }
      		
    	#end
	   }
	   
	   @Test
       @DirtiesContext
	   public void testRetrieve() {

		 Builder<${interfaceDtoClassName}> builder = factory.getBuilder(${interfaceDtoClassName}.class);
		 ${interfaceDtoClassName} ${interfaceDtoVarName} = builder.build();
		 
		 ${serviceVarName}.add(${interfaceDtoVarName});
		 
		 ${interfaceDtoClassName} recoveredDTO = ${serviceVarName}.retrieve(${interfaceDtoVarName}.getId());
		 assertEquals(${interfaceDtoVarName}.getId() , recoveredDTO.getId());

	 }
	 
	 @Test
     @DirtiesContext
	 public void testRetrieveAll() {
	   	         
	      Builder<${interfaceDtoClassName}> builder = factory.getBuilder(${interfaceDtoClassName}.class);
	      
	   	  ${interfaceDtoClassName} ${interfaceDtoVarName}1 = builder.build();
	   	  ${interfaceDtoClassName} ${interfaceDtoVarName}2 = builder.build();
	   	  ${interfaceDtoClassName} ${interfaceDtoVarName}3 = builder.build();
	   	  
	      ${serviceVarName}.add(${interfaceDtoVarName}1);
	      ${serviceVarName}.add(${interfaceDtoVarName}2);
	      ${serviceVarName}.add(${interfaceDtoVarName}3);
	      
	     	      
	      List<${interfaceDtoClassName}> ${interfaceDtoVarName}List = ${serviceVarName}.retrieveAll();
	      assertEquals(3,${interfaceDtoVarName}List.size());
	          
	   }
	   
}