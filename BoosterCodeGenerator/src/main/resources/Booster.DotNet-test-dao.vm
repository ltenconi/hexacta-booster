#set($entityClassName = $aClass.getSimpleName())
#set($entityVarName = $entityClassName.toLowerCase())

using System;
using System.Collections.Generic;
using System.IO;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Reflection;
using NHibernate;
using NHibernate.Cfg;
using NHibernate.Tool.hbm2ddl;
using Dao.NHibernate;
using Model;

namespace Dao.NHibernate.Test
{
        
    /// <summary>
    ///This is a test class for $daoTestClassName and is intended
    ///to contain all $daoTestClassName Unit Tests
    ///</summary>
    [TestClass()]
    public class $daoTestClassName
    {
        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }

        #region Additional test attributes

        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        [ClassInitialize()]
        public static void MyClassInitialize(TestContext testContext)
        {
            AppDomain.CurrentDomain.SetData("APPBASE", System.Environment.CurrentDirectory);
            Directory.CreateDirectory("PublicAssemblies;PrivateAssemblies");
         }
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        
        //Use TestInitialize to run code before running each test
        // [TestInitialize()]
        // public void MyTestInitialize()
        // {            
        // }        
        //Use TestCleanup to run code after each test has run
         [TestCleanup()]
         public void MyTestCleanup()
         {
         	deleteDataBase();
         }
        
        #endregion

        /// <summary>
        ///A test for $daoClassName Save
        ///</summary>
        [TestMethod()]
		[DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]
      
        public void SaveTest()
        {
            ISession session = NHibernateSessionManager.Instance.GetSession();
            
            NHibernateSessionManager.Instance.BeginTransaction();
        
            $daoClassName $daoVarName = new ${daoClassName}();
            $entityClassName $entityVarName = new ${entityClassName}();
            ${daoVarName}.Save(${entityVarName});
            //FieldInfo field = ${entityVarName}.GetType().GetField("${propertyId}");
            $entityClassName ${entityVarName}Recovered = ${daoVarName}.GetById(${entityVarName}.${propertyId}, false);
            NHibernateSessionManager.Instance.CommitTransaction();

            Assert.AreEqual(${entityVarName}.${propertyId}, ${entityVarName}Recovered.${propertyId});
            //session.Close();
                   
        }

        /// <summary>
        ///A test for $daoClassName Delete
        ///</summary>
        [TestMethod()]
	    [DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]     
        public void DeleteTest()
        {
           	ISession session = NHibernateSessionManager.Instance.GetSession();
            
            NHibernateSessionManager.Instance.BeginTransaction();
         
            $daoClassName $daoVarName = new ${daoClassName}();
            $entityClassName $entityVarName = new ${entityClassName}();
            ${daoVarName}.Save(${entityVarName});
            ${daoVarName}.Delete(${entityVarName});

            NHibernateSessionManager.Instance.CommitTransaction();
                  
            $entityClassName ${entityVarName}Recovered = ${daoVarName}.GetById(${entityVarName}.${propertyId}, false);
 			Assert.IsNotInstanceOfType(${entityVarName}, ${entityVarName}Recovered.GetType());
                      
            //session.Close();            
        }

        /// <summary>
        ///A test for $daoClassName SaveOrUpdate
        ///</summary>
        [TestMethod()]
		[DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]      
        public void SaveOrUpdateTest()
        {
			#if ($modificable == false)
				Assert.IsTrue(true);
			#else   
	            ISession session = NHibernateSessionManager.Instance.GetSession();
            
				NHibernateSessionManager.Instance.BeginTransaction();
         
	            $daoClassName $daoVarName = new ${daoClassName}();
	            $entityClassName $entityVarName = new ${entityClassName}();
	            ${daoVarName}.SaveOrUpdate(${entityVarName});

	            $entityClassName ${entityVarName}Recovered = ${daoVarName}.GetById(${entityVarName}.${propertyId}, false);
	            
	            Assert.AreEqual(${entityVarName}.${propertyId}, ${entityVarName}Recovered.${propertyId});
	            FieldInfo fieldModified = ${entityVarName}Recovered.GetType().GetField("${modificablePropertyName}",BindingFlags.NonPublic | BindingFlags.Public | BindingFlags.Static | BindingFlags.Instance);
	            fieldModified.SetValue(${entityVarName}Recovered, $fieldValue);
	            ${daoVarName}.SaveOrUpdate(${entityVarName}Recovered);
	            NHibernateSessionManager.Instance.CommitTransaction();

	            $entityClassName ${entityVarName}Modified = ${daoVarName}.GetById(${entityVarName}Recovered.${propertyId}, false);
	            Object valueRecovered = fieldModified.GetValue(${entityVarName}Recovered);
	            Object valueModified = fieldModified.GetValue(${entityVarName}Modified);
	            Assert.AreEqual(valueModified.ToString(), valueRecovered.ToString());
				//session.Close();
	            
			#end
        }

        /// <summary>
        ///A test for $daoClassName GetById
        ///</summary>
        [TestMethod()]
		[DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]            
        public void GetByIdTest()
        {
			ISession session = NHibernateSessionManager.Instance.GetSession();
            
            NHibernateSessionManager.Instance.BeginTransaction();
            $daoClassName $daoVarName = new ${daoClassName}();
            $entityClassName $entityVarName = new ${entityClassName}();
            ${daoVarName}.Save(${entityVarName});

            $entityClassName ${entityVarName}Recovered = ${daoVarName}.GetById(${entityVarName}.${propertyId}, false);
            NHibernateSessionManager.Instance.CommitTransaction();
       
            Assert.AreEqual(${entityVarName}.${propertyId}, ${entityVarName}Recovered.${propertyId});
            //session.Close();
        }

        /// <summary>
        ///A test for $daoClassName GetAll
        ///</summary>
        [TestMethod()]
		[DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]     
        public void GetAllTest()
        {
			ISession session = NHibernateSessionManager.Instance.GetSession();
            
            NHibernateSessionManager.Instance.BeginTransaction();
            $daoClassName $daoVarName = new ${daoClassName}();

            $entityClassName ${entityVarName}1 = new ${entityClassName}();
            ${daoVarName}.Save(${entityVarName}1);
           
            NHibernateSessionManager.Instance.CommitTransaction();
        
            List<${entityClassName}> ${entityVarName}List = ${daoVarName}.GetAll();

            Assert.AreEqual(1, ${entityVarName}List.Count);
            //session.Close();          
            
        }

        /// <summary>
        ///A test for $daoClassName GetByCriteria
        ///</summary>
        [TestMethod()]
	    [DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]        
        public void GetByCriteriaTest()
        {
			ISession session = NHibernateSessionManager.Instance.GetSession();
            
            NHibernateSessionManager.Instance.BeginTransaction();
            $daoClassName $daoVarName = new ${daoClassName}();
            
            $entityClassName ${entityVarName}A = new ${entityClassName}();
            ${daoVarName}.Save(${entityVarName}A);
     
            NHibernateSessionManager.Instance.CommitTransaction();
            
            System.Collections.Generic.List<${entityClassName}> ${entityVarName}List = ${daoVarName}.GetByCriteria();

            Assert.AreEqual(1, ${entityVarName}List.Count);
           // session.Close();            
           
        }

        /// <summary>
        ///A test for $daoClassName GetByExample
        ///</summary>
        [TestMethod()]
        [DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]     
        public void GetByExampleTest()
        {
			ISession session = NHibernateSessionManager.Instance.GetSession();
            
            NHibernateSessionManager.Instance.BeginTransaction();
            $daoClassName $daoVarName = new ${daoClassName}();

            $entityClassName ${entityVarName}A = new ${entityClassName}();
            ${daoVarName}.Save(${entityVarName}A);
               
            NHibernateSessionManager.Instance.CommitTransaction();
            $entityClassName ${entityVarName}Example = ${entityVarName}A;
            List<${entityClassName}> ${entityVarName}List = ${daoVarName}.GetByExample(${entityVarName}Example);

            Assert.IsTrue(${entityVarName}List.Count > 0);
			//session.Close();
            
        }

        ///// <summary>
        /////A test for $daoClassName GetUniqueByExample
        /////</summary>
        //[TestMethod()]
        //[DeploymentItem("hibernate.cfg.xml", "PublicAssemblies;PrivateAssemblies")]     
        //public void GetUniqueByExample()
        //{
        //    Assert.Inconclusive("Not implemented yet");
        //}
       
       #region Private
       
 		private void deleteDataBase()
 		{
 		   ISession session = NHibernateSessionManager.Instance.GetSession();
       	   NHibernateSessionManager.Instance.BeginTransaction();
      
	      #foreach($modelClass in $modelClassList)
			#if($modelClass.isAbstract() == false)
		${modelClass.getSimpleName()}DAO ${modelClass.getSimpleName().toLowerCase()}DAO = new ${modelClass.getSimpleName()}DAO();
	       	foreach (${modelClass.getSimpleName()} t in ${modelClass.getSimpleName().toLowerCase()}DAO.GetAll())
			{
			  ${modelClass.getSimpleName().toLowerCase()}DAO.Delete(t);
			}
	  		#end 
		#end
  		   NHibernateSessionManager.Instance.CommitTransaction();
	       session.Close();
   		}
   		#endregion
    }
}
